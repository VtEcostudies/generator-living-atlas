
#
# This is a inventory with extras variables so here you can override the
# generated configurations with other variables without modifing the other
# inventories. So when you rerun the generator in the future, you don't
# loose your changes.
#

[all:vars]

support_email=support@<%= LA_domain %>

[cas-servers:vars]

# If you run CAS for the fist time without these four keys it will be autogenerated and later you can copy-paste here (see /var/log/atlas/cas/cas.log after first start to copy these autogenerated keys)
# See also https://apereo.github.io/cas/5.0.x/installation/Configuring-SSO-Session-Cookie.html
#
# You cannot put here and arbitrary string key, because needs to be of some size, etc (better autogenerate leaving this empty, and later get them from the logs, copy here, and re-run the inventory)
#

pac4j_cookie_signing_key=
pac4j_cookie_encryption_key=

cas_webflow_signing_key=
cas_webflow_encryption_key=

# Set this keys/secrets with valid keys to enable it in your CAS login menu

# http://www.pac4j.org/docs/clients.html
# https://apereo.github.io/cas/5.1.x/installation/OAuth-OpenId-Authentication.html

# pac4j_facebook_consumer_key=to_be_added_in_the_near_future
# pac4j_facebook_consumer_secret=to_be_added_in_the_near_future

# pac4j_twitter_consumer_key=to_be_added_in_the_near_future
# pac4j_twitter_consumer_secret=to_be_added_in_the_near_future

# pac4j_google_consumer_key=to_be_added_in_the_near_future
# pac4j_google_consumer_secret=to_be_added_in_the_near_future

# pac4j_linkedin_consumer_key=to_be_added_in_the_near_future
# pac4j_linkedin_consumer_secret=to_be_added_in_the_near_future

# pac4j_windows_consumer_key=to_be_added_in_the_near_future
# pac4j_windows_consumer_secret=to_be_added_in_the_near_future

# pac4j_yahoo_consumer_key=to_be_added_in_the_near_future
# pac4j_yahoo_consumer_secret=to_be_added_in_the_near_future

# Sample of Oauth configuration:
# Go to your Github organization settings, add a Oauth App
# with:
# Homepage url: https://<%= LA_cas_url %>/
# Authorization callback URL: https:///<%= LA_cas_url %>/cas/login
# put here the key and secret, and rerun the playbook
# pac4j_github_consumer_key=to_be_added_in_the_near_future
# pac4j_github_consumer_secret=to_be_added_in_the_near_future

# Sample flickr
# oauth_providers_flickr_enabled=true
# oauth_providers_flickr_key=SOMETHING
# oauth_providers_flickr_secret=SOMETHING
# oauth_providers_flickr_callback=https://auth.ala.org.au/userdetails/profile/flickrCallback

# Sample iNaturalist
# oauth_providers_inaturalist_enabled=true
# oauth_providers_inaturalist_key=SOMETHING
# oauth_providers_inaturalist_secret=SOMETHING
# oauth_providers_inaturalist_callback=${grails.serverURL}/profile/inaturalistCallback

# Use boostrap container or container-fluid
# We don't use fluid because `userdetails` has a wrong margin with fluid
skin_fluid_layout = false

# Recatcha sample
# userdetails_recaptcha_site_key=
# userdetails_recaptcha_secret_key=

# uncomment to load a db dump
# cas_db_dump=~/dev/tmp/auth-test/emmet-dump.sql
# apikey_db_dump=~/dev/tmp/auth-test/apikey-dump.sql
